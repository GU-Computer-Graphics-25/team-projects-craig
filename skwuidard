<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title> Squidward </title>
    <style>
        body { margin: 0; overflow: hidden; }
        canvas { display: block; }
    </style>
</head>
<body>
    <script src="./js/three.js"></script>
    <script src="./js/OrbitControls.js"></script>
    <script src="./js/SceneUtils.js"></script>
    <script src="./js/dat.gui.js"></script> <script>
    
        // === Scene Setup ===
        const scene = new THREE.Scene();
        scene.background = new THREE.Color(0x87CEEB);

        // === Camera Setup ===
        const camera = new THREE.PerspectiveCamera(75, window.innerWidth / window.innerHeight, 0.1, 1000);
        camera.position.set(0, 30.5, 50);

        // === Renderer Setup ===
        const renderer = new THREE.WebGLRenderer({ antialias: true });
        renderer.setSize(window.innerWidth, window.innerHeight);
        document.body.appendChild(renderer.domElement);

        // === Lighting ===
        const ambientLight = new THREE.AmbientLight(0xffffff, 0.7);
        scene.add(ambientLight);
        const directionalLight = new THREE.DirectionalLight(0xffffff, 1.2);
        directionalLight.position.set(5, 10, 7.5);
        scene.add(directionalLight);
        animate();

        //creating squidward
        function createSquidwardHead(x, y, z) {
            const squidwardGroup = new THREE.Group();
            const squidwardColor = 0x92C8C8;

            // --- HEAD ---
            const headTopGeometry = new THREE.SphereGeometry(10, 64, 64);
            headTopGeometry.scale(1.5, 1.2, 1.1); // wider, taller top
            const headMaterial = new THREE.MeshStandardMaterial({ color: squidwardColor, roughness: 0.8, metalness: 0.1 });
            const headTop = new THREE.Mesh(headTopGeometry, headMaterial);
            headTop.position.set(0, 24, 0);
            squidwardGroup.add(headTop);

            const headMiddleGeometry = new THREE.CylinderGeometry(7, 7, 10, 32);
            headMiddleGeometry.scale(1.5, 1.2, 1.1); 
            const headMiddle = new THREE.Mesh(headMiddleGeometry, headMaterial);
            headMiddle.position.set(0, 18, 0);
            squidwardGroup.add(headMiddle);

            const headBottomGeometry = new THREE.SphereGeometry(7, 64, 64);
            headBottomGeometry.scale(2.2, 0.9, 1.2); 
            const headBottom = new THREE.Mesh(headBottomGeometry, headMaterial);
            headBottom.position.set(0, 9, 0);
            squidwardGroup.add(headBottom);

            // --- NECK ---
            const neckGeometry = new THREE.CylinderGeometry(4.5, 4.5, 5, 32);
            const neck = new THREE.Mesh(neckGeometry, headMaterial);
            neck.position.set(0, 1, 0);
            squidwardGroup.add(neck);

            // --- FACE PLANE (moved outward) ---
            const facePlane = new THREE.Group();
            facePlane.position.set(0, 20, 9); // pushed out
            squidwardGroup.add(facePlane);

            // --- EYES ---
            const eyeMaterial = new THREE.MeshStandardMaterial({ color: 0xffffff });
            const pupilMaterial = new THREE.MeshStandardMaterial({ color: 0x111111 });
            
            [-3.5, 3.5].forEach(offsetX => {
                const eyeball = new THREE.Mesh(new THREE.SphereGeometry(3.5, 32, 32), eyeMaterial);
                eyeball.position.set(offsetX, 2, 0);
                facePlane.add(eyeball);

                const pupil = new THREE.Mesh(new THREE.SphereGeometry(1.2, 16, 16), pupilMaterial);
                pupil.position.set(offsetX, 2, 3);
                facePlane.add(pupil);
            });

            // --- EYELIDS ---
            const eyelidMaterial = new THREE.MeshStandardMaterial({ color: squidwardColor });
            [-3.5, 3.5].forEach(offsetX => {
                const eyelid = new THREE.Mesh(new THREE.SphereGeometry(3.7, 32, 32, 0, Math.PI * 2, 0, Math.PI / 2), eyelidMaterial);
                eyelid.position.set(offsetX, 2.5, -0.2);
                facePlane.add(eyelid);
            });

            // --- EYEBROWS ---
            const eyebrowMaterial = new THREE.MeshStandardMaterial({ color: 0x222222 });
            const leftBrow = new THREE.Mesh(new THREE.BoxGeometry(5, 1, 1), eyebrowMaterial);
            leftBrow.position.set(-5, 6, 2);
            leftBrow.rotation.z = -0.25;
            facePlane.add(leftBrow);

            const rightBrow = new THREE.Mesh(new THREE.BoxGeometry(5, 1, 1), eyebrowMaterial);
            rightBrow.position.set(5, 6, 2);
            rightBrow.rotation.z = 0.25;
            facePlane.add(rightBrow);

            // --- NOSE ---
            const noseMaterial = new THREE.MeshStandardMaterial({ color: squidwardColor });
            const nose = new THREE.Mesh(new THREE.CylinderGeometry(0.5, 2.2, 11, 32), noseMaterial);
            nose.position.set(0, -4, 1);
            nose.rotation.x = 0.2; 
            facePlane.add(nose);

            const noseTip = new THREE.Mesh(new THREE.SphereGeometry(2.2, 22, 32), noseMaterial);
            noseTip.position.set(0, -10, -0.3);
            facePlane.add(noseTip);

            facePlane.rotation.x = -0.1;

            // --- MOUTH (corrected rotation) ---
            const mouthMaterial = new THREE.MeshStandardMaterial({ color: 0x111111 });
            const mouthGeometry = new THREE.TorusGeometry(7.4, 0.35, 16, 100, Math.PI);
            const mouth = new THREE.Mesh(mouthGeometry, mouthMaterial);
            mouth.rotation.x = Math.PI; 
            mouth.rotation.z = Math.PI;     
            mouth.scale.set(1.2, 0.5, 1); 
            mouth.position.set(0, -12, -2);
            facePlane.add(mouth);

            // --- Final Placement ---
            squidwardGroup.position.set(x, y, z);
            scene.add(squidwardGroup);

            return squidwardGroup;
        }
        createSquidwardHead(0, -10, 0);


        // === Orbit Controls ===
        const controls = new THREE.OrbitControls(camera, renderer.domElement);
        controls.enableDamping = true;
        controls.dampingFactor = 0.25;
        controls.enableZoom = true;


        function animate() {
            requestAnimationFrame(animate);
            renderer.render(scene, camera);
        }
    </script>

</body>
</html>
